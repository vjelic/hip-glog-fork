Environment variable,Default value,Value
"``AMD_LOG_LEVEL``\nEnables HIP log on various level.",``0``,"0: Disable log.\n1: Enables error logs.\n2: Enables warning logs next to lower-level logs.\n3: Enables information logs next to lower-level logs.\n4: Enables debug logs next to lower-level logs.\n5: Enables debug extra logs next to lower-level logs."
"``AMD_LOG_LEVEL_FILE``\nSets output file for ``AMD_LOG_LEVEL``.","stderr output",""
"``AMD_LOG_MASK``\nSpecifies HIP log filters. Here is the ` complete list of log masks <https://github.com/ROCm/clr/blob/develop/rocclr/utils/debug.hpp#L40>`_.",``0x7FFFFFFF``,"0x1: Log API calls.\n0x2: Kernel and copy commands and barriers.\n0x4: Synchronization and waiting for commands to finish.\n0x8: Decode and display AQL packets.\n0x10: Queue commands and queue contents.\n0x20: Signal creation, allocation, pool.\n0x40: Locks and thread-safety code.\n0x80: Kernel creations and arguments, etc.\n0x100: Copy debug.\n0x200: Detailed copy debug.\n0x400: Resource allocation, performance-impacting events.\n0x800: Initialization and shutdown.\n0x1000: Misc debug, not yet classified.\n0x2000: Show raw bytes of AQL packet.\n0x4000: Show code creation debug.\n0x8000: More detailed command info, including barrier commands.\n0x10000: Log message location.\n0x20000: Memory allocation.\n0x40000: Memory pool allocation, including memory in graphs.\n0x80000: Timestamp details.\n0xFFFFFFFF: Log always even mask flag is zero."
"``HIP_LAUNCH_BLOCKING``\nUsed for serialization on kernel execution.",``0``,"0: Disable. Kernel executes normally.\n1: Enable. Serializes kernel enqueue, behaves the same as ``AMD_SERIALIZE_KERNEL``."
"``HIP_VISIBLE_DEVICES`` (or ``CUDA_VISIBLE_DEVICES``)\nOnly devices whose index is present in the sequence are visible to HIP.,Unset by default.","0,1,2: Depending on the number of devices on the system.",""
"``GPU_DUMP_CODE_OBJECT``\nDump code object.",``0``,"0: Disable\n1: Enable"
"``AMD_SERIALIZE_KERNEL``\nSerialize kernel enqueue.",``0``,"0: Disable\n1: Wait for completion before enqueue.\n2: Wait for completion after enqueue.\n3: Both"
"``AMD_SERIALIZE_COPY``\nSerialize copies.",``0``,"0: Disable\n1: Wait for completion before enqueue.\n2: Wait for completion after enqueue.\n3: Both"
"``AMD_DIRECT_DISPATCH``\nEnable direct kernel dispatch (Currently for Linux; under development for Windows).",``1``,"0: Disable\n1: Enable"
"``GPU_MAX_HW_QUEUES``\nThe maximum number of hardware queues allocated per device.",``4``,"The variable controls how many independent hardware queues HIP runtime can create per process,\nper device. If an application allocates more HIP streams than this number, then HIP runtime reuses\nthe same hardware queues for the new streams in a round-robin manner. Note that this maximum\nnumber does not apply to hardware queues that are created for CU-masked HIP streams, or\ncooperative queues for HIP Cooperative Groups (single queue per device)."
"``ROCR_VISIBLE_DEVICES``\nA list of device indices or UUIDs that will be exposed to applications.",,"Example: ``0,GPU-DEADBEEFDEADBEEF``"
"``GPU_DEVICE_ORDINAL``\nDevices indices exposed to OpenCL and HIP applications.",,"Example: ``0,2``"
"``HIP_VISIBLE_DEVICES`` or ``CUDA_VISIBLE_DEVICES``\nDevice indices exposed to HIP applications.",,"Example: ``0,2``"
"``HIP_HIDDEN_FREE_MEM``\nAmount of memory to hide from the free memory reported by hipMemGetInfo.",``0``,"0: Disable\nUnit: megabyte (MB)"
"``HIP_HOST_COHERENT``\nSpecifies if the memory is coherent between the host and GPU in ``hipHostMalloc``".,``0``,"0: Memory is not coherent.\n1: Memory is coherent.\nEnvironment variable has effect, if the following conditions are satisfied:\n- One of the ``hipHostMallocDefault``, ``hipHostMallocPortable``,  ``hipHostMallocWriteCombined`` or ``hipHostMallocNumaUser`` flag set to 1.\n- ``hipHostMallocCoherent``, ``hipHostMallocNonCoherent`` and ``hipHostMallocMapped`` flags set to 0."
"``HIP_INITIAL_DM_SIZE``\nSet initial heap size for device malloc.",``8388608``,"Unit: Byte\nThe default value corresponds to 8 MB."
"``HIP_MEM_POOL_SUPPORT``\nEnables memory pool support in HIP.","``0``","0: Disable\n1: Enable"
"``HIP_MEM_POOL_USE_VM``\nEnables memory pool support in HIP.","``0``: other OS\n``1``: Windows","0: Disable\n1: Enable"
"``HIP_VMEM_MANAGE_SUPPORT``\nVirtual Memory Management Support.",``1``,"0: Disable\n1: Enable"
"``GPU_MAX_HEAP_SIZE``\nSet maximum size of the GPU heap to % of board memory.",``100``,"Unit: Percentage"
"``GPU_MAX_REMOTE_MEM_SIZE``\nMaximum size that allows device memory substitution with system.",``2``,"Unit: kilobyte (KB)"
"``GPU_NUM_MEM_DEPENDENCY``\nNumber of memory objects for dependency tracking.",``256``,
"``GPU_STREAMOPS_CP_WAIT``\nForce the stream memory operation to wait on CP.",``0``,"0: Disable\n1: Enable"
"``HSA_LOCAL_MEMORY_ENABLE``\nEnable HSA device local memory usage.",``1``,"0: Disable\n1: Enable"
"``PAL_ALWAYS_RESIDENT``\nForce memory resources to become resident at allocation time.",``0``,"0: Disable\n1: Enable"
"``PAL_PREPINNED_MEMORY_SIZE``\nSize of prepinned memory.",``64``,"Unit: kilobyte (KB)"
"``REMOTE_ALLOC``\nUse remote memory for the global heap allocation.",``0``,"0: Disable\n1: Enable"
"``HSA_CU_MASK``\nSets the mask on a lower level of queue creation in the driver,\nthis mask will also be set for queues being profiled.",,"Example: ``1:0-8``"
"``ROC_GLOBAL_CU_MASK``\nSets the mask on queues created by the HIP or the OpenCL runtimes,\nthis mask will also be set for queues being profiled.",,"Example: ``0xf``, enables only 4 CUs"
"``HIP_FORCE_QUEUE_PROFILING``\nUsed to run the app as if it were run in rocprof. Forces command queue\nprofiling on by default.",,"0: Disable\n1: Enable"
"``HIPRTC_COMPILE_OPTIONS_APPEND``\nSets compile options needed for ``hiprtc`` compilation.","None","``--gpu-architecture=gfx906:sramecc+:xnack``, ``-fgpu-rdc``"
